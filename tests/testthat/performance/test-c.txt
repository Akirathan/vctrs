> ints <- rep(list(1L), 100)
> dbls <- rep(list(1), 100)

`vec_c()` 
==========

> # Integers
> with_memory_prof(vec_c(!!!ints))
[1] 1.7KB

> # Doubles
> with_memory_prof(vec_c(!!!dbls))
[1] 2.09KB

> # Integers to integer
> with_memory_prof(vec_c(!!!ints, ptype = int()))
[1] 3.38KB

> # Doubles to integer
> with_memory_prof(vec_c(!!!dbls, ptype = int()))
[1] 3.77KB


`vec_unchop()` 
===============

> # Integers
> with_memory_prof(vec_unchop(ints))
[1] 896B

> # Doubles
> with_memory_prof(vec_unchop(dbls))
[1] 1.27KB

> # Integers to integer
> with_memory_prof(vec_unchop(ints, ptype = int()))
[1] 896B

> # Doubles to integer
> with_memory_prof(vec_unchop(dbls, ptype = int()))
[1] 896B


Concatenation with with names
=============================

> # Named integers
> ints <- rep(list(set_names(1:3, letters[1:3])), 100)
> with_memory_prof(vec_unchop(ints))
[1] 6.44KB

> # Data frame with named columns
> df <- data_frame(x = set_names(as.list(1:2), c("a", "b")), y = set_names(1:2, c(
+   "A", "B")), z = data_frame(Z = set_names(1:2, c("Za", "Zb"))))
> dfs <- rep(list(df), 100)
> with_memory_prof(vec_unchop(dfs))
[1] 8.53KB

> # Data frame with rownames (non-repaired, non-recursive case)
> df <- data_frame(x = 1:2)
> dfs <- rep(list(df), 100)
> dfs <- map2(dfs, seq_along(dfs), set_rownames_recursively)
> with_memory_prof(vec_unchop(dfs))
[1] 5.77KB

> # Data frame with rownames (repaired, non-recursive case)
> dfs <- map(dfs, set_rownames_recursively)
> with_memory_prof(vec_unchop(dfs))
[1] 13.1KB

> # FIXME: Data frame with rownames (non-repaired, recursive case)
> df <- data_frame(x = 1:2, y = data_frame(x = 1:2))
> dfs <- rep(list(df), 100)
> dfs <- map2(dfs, seq_along(dfs), set_rownames_recursively)
> with_memory_prof(vec_unchop(dfs))
[1] 1MB

> # FIXME: Data frame with rownames (repaired, recursive case)
> dfs <- map(dfs, set_rownames_recursively)
> with_memory_prof(vec_unchop(dfs))
[1] 1.02MB

